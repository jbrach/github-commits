{
  "name": "yaenumerable",
  "description": "Yet Another Enumerable Framework",
  "version": "0.0.19",
  "author": {
    "name": "Tim Chaplin",
    "email": "tim.chaplin@ticktockdevelopment.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tjchaplin/YAEnumerable.git"
  },
  "homepage": "https://github.com/tjchaplin/YAEnumerable.git",
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.4.3",
    "grunt-contrib-watch": "~0.4.0",
    "grunt-release": "~0.3.3"
  },
  "browserDependencies": {},
  "keywords": [
    "Enumerable",
    "Array",
    "linq"
  ],
  "engines": {
    "node": ">= 0.2.0"
  },
  "main": "./lib/Enumerable.js",
  "directories": {
    "test": "tests",
    "lib": "lib"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha tests/*"
  },
  "license": "MIT",
  "readme": "#YAEnumerable\n\n  Yet Another Enumerable Java Script Framework\n\n[![Build Status](https://travis-ci.org/tjchaplin/YAEnumerable.png)](https://travis-ci.org/tjchaplin/YAEnumerable)\n\n##Purpose\n\n  To create and maintain a linq type JS framework.  See Credits/Other Frameworks for alternatives.\n\n##Install\n\n  ```\n  npm install yaenumerable\n  ```\n\n##Example\nEach selector will at a minimum return an item and the index of the item.\nThe index is always the last item returned in the callback.  See tests for additional examples.\n\n\n###Where Condition\n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n  var anArray = [{a:1},{a:2},{a:3}];\n  \n  //aValues will now be [{a:2},{a:3}]\n  var aValues = Enumerable.FromArray(anArray)\n                          .Where(function(item){return item.a > 1;})\n                          .ToArray();\n  ```\n\n###Select\n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n  var anArray = [{a:1},{a:2},{a:3}];\n  \n  //aValues will now be [1,2,3]\n  var aValues = Enumerable.FromArray(anArray)\n                          .Select( function(item){ return item.a; } )\n                          .ToArray();\n  ```\n\n###SelectMany\n  Allows you to flatten an array\n  \n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n  var anArray = [ {a:[1,2,3]}, {a:[4,5,6]}, {a:[7,8,9]} ];\n  \n  //Will return: [1,2,3,4,5,6,7,8,9]\n  var flattenedArray = Enumerable.SelectMany(function(item){return item.a})\n                                 .ToArray();\n  ```\n\n###First\n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n  var anArray = [{a:1},{a:2},{a:3}];\n  \n  //if no function specified will return first item:{a:1}\n  var firstObject = Enumerable.FromArray(anArray).First();\n  \n  //Since function is specfied to return a, will return 1\n  var firstA = Enumerable.FromArray(anArray)\n                            .First(function(item){return item.a;});\n  ```\n\n###Sum\n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n\n  //Sum without a selector\n  //In this case it will return 6\n  var sum = Enumerable.FromArray([1,2,3]).Sum();\n\n  //When specified with a selector will return the sum of that item:\n  //In this case it will return 6\n  var sumOfA = Enumerable.FromArray([{a:1},{a:2},{a:3}])\n                            .Sum(function(item){return item.a;});\n  ```\n\n###Count\n  Count items in enumerable.  Example use is with an enumerable\n  \n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n  var anArray = [1,2,3];\n  \n  //Will return 2\n  var count = Enumerable.FromArray([1,2,3])\n                        .Where(function(item){return item > 1;})\n                        .Count();\n  ```\n\n###Any\n  Determines if any items meet a condtion\n  \n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n  var anArray = [1,2,3];\n  \n  //Will return true\n  var hasItemGreaterThan1 = Enumerable.FromArray([1,2,3])\n                        .Any(function(item){return item > 1;});\n  \n  //Can use with a selector as well\n  var hasItemAGreaterThan1 = Enumerable.FromArray([{a:1},{a:2},{a:3}])\n                        .Any(function(item){return item.a > 1;});\n  \n  ```\n\n###ForEach\n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n  var anArray = [{a:1},{a:2},{a:3}];\n  \n  //aValues will now be [1,2,3]\n  var aValues = Enumerable.FromArray(anArray)\n                          .ForEach( function(item){/*Do something useful*/})\n                          .ToArray();\n  ```\n\n###AsyncForEach\n  Allows you to make async calls on each item in an array and get the results of all calls when each call is complete.\n  \n  ```javascript\n  var Enumerable = require(\"yaenumerable\");\n  var anArray = [{a:1},{a:2},{a:3}];\n\n\tvar longProcess = function(item, onLongProcessComplete){\n    //Some long process\n    var result = item;\n    onLongProcessComplete(result);\n\t};\n\n\tEnumerable.FromArray(anArray)\n      \t\t\t.AsyncForEach(longProcess,\n                          function(results){ \n                            //results is an array with each updated item\n                            onComplete(results);\n                          });\n  ```\n  \n\n###For additional examples see the tests.  To run them:\n  ```\n  npm test\n  ```\n  \n##Credits/Other Frameworks\n  \n  * [enumerablejs - lukesmith's very comprehensive framework](https://github.com/lukesmith/enumerablejs.git)\n  * [enumerable - VisionMedia TJ Holowaychuk](https://github.com/component/enumerable.git)\n",
  "_id": "yaenumerable@0.0.19",
  "dist": {
    "shasum": "348906da27ac1fd6fca0a8940286eed355e06a41"
  },
  "_from": "yaenumerable@0.0.19"
}
